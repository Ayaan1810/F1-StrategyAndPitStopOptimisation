import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import classification_report, confusion_matrix, average_precision_score, roc_auc_score, accuracy_score
from xgboost import XGBClassifier
import joblib

# ---------- Step 1: Load Enhanced Dataset ----------
df = pd.read_csv("2023_all_gp_cleaned_laps.csv")

# ---------- Step 2: Create Target Column ----------
df["NextTyreLife"] = df.groupby("Driver")["TyreLife"].shift(-1)
df["PitStopNextLap"] = ((df["NextTyreLife"] < df["TyreLife"]) & (df["TyreLife"] > 2)).astype(int)

# ---------- Step 3: Drop Missing Rows ----------
required_cols = ["TyreLife", "Stint", "Compound", "TrackStatus", "Position", "LapTimeDelta", "GapToCarAhead"]
weather_cols = ["TrackTemp", "Rainfall", "Humidity", "AirTemp"]
df = df.dropna(subset=required_cols + weather_cols)

# ---------- Step 4: Feature Selection ----------
features = required_cols + weather_cols

# ---------- Step 5: One-Hot Encoding ----------
encoder = OneHotEncoder(sparse_output=False, drop="first", handle_unknown='ignore')
categorical_encoded = encoder.fit_transform(df[["Compound", "TrackStatus"]])
encoded_df = pd.DataFrame(categorical_encoded, columns=encoder.get_feature_names_out(["Compound", "TrackStatus"]))

# ---------- Step 6: Final Feature Matrix ----------
numerical_df = df[["TyreLife", "Stint", "Position", "LapTimeDelta", "GapToCarAhead"] + weather_cols].reset_index(drop=True)
X = pd.concat([numerical_df, encoded_df.reset_index(drop=True)], axis=1)
y = df["PitStopNextLap"].values

# ‚úÖ Save exact input feature names
joblib.dump(X.columns.tolist(), "pit_stop_feature_columns.pkl")

# ---------- Step 7: Handle Imbalance ----------
pos = np.sum(y)
neg = len(y) - pos
scale_pos_weight = neg / pos
print(f"‚öñÔ∏è Class imbalance: {pos} pit stops vs {neg} non-pit laps")

# ---------- Step 8: Train/Test Split ----------
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)

# ---------- Step 9: Train XGBoost Model ----------
model = XGBClassifier(
    n_estimators=250,
    max_depth=5,
    learning_rate=0.08,
    subsample=0.9,
    colsample_bytree=0.85,
    scale_pos_weight=scale_pos_weight,
    use_label_encoder=False,
    eval_metric='logloss',
    random_state=42
)
model.fit(X_train, y_train)

# ---------- Step 10: Evaluation ----------
y_pred = model.predict(X_test)
y_proba = model.predict_proba(X_test)[:, 1]

print("\n‚úÖ Classification Report:\n", classification_report(y_test, y_pred))
print("üìä Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print(f"üéØ Overall Accuracy: {accuracy_score(y_test, y_pred):.4f}")
print(f"üìà AUC-PR: {average_precision_score(y_test, y_proba):.4f}")
print(f"üìâ AUC-ROC: {roc_auc_score(y_test, y_proba):.4f}")

# ---------- Step 11: Save Artifacts ----------
joblib.dump(model, "pit_stop_predictor_model.joblib")
joblib.dump(encoder, "pit_stop_encoder.pkl")
print("üíæ Saved: model, encoder, and feature list.")
